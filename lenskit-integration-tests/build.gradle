dependencies {
    compile project(':lenskit-all')
    compile project(':lenskit-test')
    testRuntime project(':lenskit-cli')
}

apply plugin: 'groovy'

// These tests require the MovieLens data set - arrange to download it
ext.mlDataDir = file("$buildDir/ml-100k")
ext.mlDataFile = file("$buildDir/ml-100k.zip")
ext.mlDataURL = 'http://files.grouplens.org/datasets/movielens/ml-100k.zip'

task fetchData(group: 'build') {
    description "Fetch data for integration tests."
    inputs.property 'url', mlDataURL
    outputs.file mlDataFile
    outputs.dir mlDataDir
    // don't download if we're running offline
    onlyIf { !gradle.startParameter.isOffline() }
}
fetchData << {
    logger.lifecycle "This analysis makes use of the MovieLens 100K data set from GroupLens Research.  Use of this data set is restricted to non-commercial purposes and is only permitted in accordance with the license terms.  More information is available at <http://lenskit.grouplens.org/ML100K>."
    mkdir buildDir
    ant {
        get src: mlDataURL, dest: mlDataFile, skipexisting: true
        unzip(src: mlDataFile, dest: mlDataDir) {
            mapper type: 'flatten'
        }
    }
}

// Configure the tests to use the data set
test {
    dependsOn fetchData
    systemProperties 'lenskit.movielens.100k': mlDataDir
}

// Run some high-level integration tests
file('src/it').eachDir { dir ->
    if (file("$dir/ignore").exists()) {
        return
    }

    def name = dir.name
    def camelName = name.replaceAll(~/(?:^|-)(.)/) {
        it[1].toUpperCase()
    }
    def prep = task("prep$camelName", type: Copy) {
        from dir
        into "$buildDir/it/$name"
    }
    task("run$camelName", type: JavaExec, group: 'verification') {
        description "Run the $name tests."
        dependsOn fetchData, "prep$camelName"
        mustRunAfter test // run the JUnit-based tests first, less overhead
    
        ext.sourceDir = dir
        ext.testDir = "$buildDir/it/$name"

        inputs.files prep
        inputs.dir mlDataDir
        outputs.dir testDir
        
        doFirst {
            // clean up outputs for a clean build
            delete fileTree(testDir) {
                include 'cache'
                include '*.gz'
                include '*.csv'
                include '*.pack'
                include '*.log'
                include '*.out'
            }
        }

        workingDir testDir
        classpath configurations.testRuntime
        main 'org.grouplens.lenskit.cli.Main'
        args 'eval', '-j0'
        // tell it where to find the data
        args "-Dlenskit.movielens.100k=$mlDataDir"
    }

    task("verify$camelName", type: JavaExec, group: 'verification') {
        description "Verify the $name tests."
        dependsOn "run$camelName"

        ext.testDir = "$buildDir/it/$name"
        inputs.dir testDir
        
        workingDir testDir
        classpath sourceSets.test.runtimeClasspath
        main 'org.grouplens.lenskit.test.VerifyTestRun'
        args testDir
    }
    check.dependsOn "verify$camelName"
}
