<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>lenskit</artifactId>
    <groupId>org.grouplens.lenskit</groupId>
    <version>1.1-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>lenskit-integration-tests</artifactId>
  <name>LensKit Integration Tests</name>
  <description>
    End-to-end integration tests for the core LensKit code.
  </description>

  <properties>
    <test.repo.directory>${project.build.directory}/test-repo</test.repo.directory>
    <archetype.test.directory>${project.build.directory}/archetype-test</archetype.test.directory>
    <data.movielens.100k>${project.build.directory}/data/ml100k</data.movielens.100k>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
    </dependency>
    <dependency>
      <groupId>org.grouplens.lenskit</groupId>
      <artifactId>lenskit-core</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.grouplens.lenskit</groupId>
      <artifactId>lenskit-knn</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.grouplens.lenskit</groupId>
      <artifactId>lenskit-svd</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.grouplens.lenskit</groupId>
      <artifactId>lenskit-eval</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Download the MovieLens 100K data set -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>download-ml-data</id>
            <goals><goal>run</goal></goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <target>
                <ant antfile="${basedir}/src/test/ant/get-data.xml"
                     target="fetch-100k">
                  <!--
                   Maven only exports POM value to Ant, not command-line value.
                   re-export here to get the right value.
                   -->
                  <property name="data.movielens.100k"
                            value="${data.movielens.100k}"/>
                </ant>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
      Disable Surefire. The Maven way is to use the failsafe plugin to run integration
      tests, so they run in the right phase and don't fail the build until the verify
      phase.
       -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>

        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- Use failsafe to run the tests. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <data.movielens.100k>${data.movielens.100k}</data.movielens.100k>
            <buildDirectory>${project.build.directory}</buildDirectory>
            <lenskit.temp.dir>${project.build.directory}/eval.scratch</lenskit.temp.dir>
          </systemPropertyVariables>
          <includes>
            <include>**/Test*.java</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <!-- Fail-fast if we can't get MovieLens data. -->
          <execution>
            <id>validate-integration-tests</id>
            <phase>validate</phase>
            <goals><goal>enforce</goal></goals>
            <configuration>
              <rules>
                <requireProperty>
                  <property>grouplens.mldata.acknowledge</property>
                  <message>
                    Integration tests require MovieLens 100K data set, which is freely
                    available for non-commercial use. To accept the license terms and
                    automatically download the dataset, set the property
                    'grouplens.mldata.acknowledge' to 'yes'.
                    For more information, see http://dev.grouplens.org/trac/lenskit/wiki/ML100K.
                  </message>
                </requireProperty>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>test-archetypes</id>
      <activation>
        <property>
          <name>lenskit.ci</name>
        </property>
      </activation>
      <!-- Depend on the archetypes so they wind up in local repo. -->
      <dependencies>
        <dependency>
          <groupId>org.grouplens.lenskit</groupId>
          <artifactId>lenskit-archetype-simple-analysis</artifactId>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.grouplens.lenskit</groupId>
          <artifactId>lenskit-archetype-fancy-analysis</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <!-- Deploy to local repo in preparation -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-invoker-plugin</artifactId>
            <version>1.7</version>
            <configuration>
              <localRepositoryPath>${test.repo.directory}</localRepositoryPath>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>install</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <!-- Use the Mock Repository Manager for repo management. -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>mrm-maven-plugin</artifactId>
            <version>1.0-beta-1</version>
            <configuration>
              <propertyName>mock.repository.url</propertyName>
              <repositories>
                <mockRepo>
                  <source>src/mrm/repository</source>
                </mockRepo>
                <mockRepo>
                  <source>${test.repo.directory}</source>
                </mockRepo>
                <proxyRepo/>
              </repositories>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>

            <dependencies>
              <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-ant-tasks</artifactId>
                <version>2.1.3</version>
              </dependency>
            </dependencies>

            <executions>
              <execution>
                <id>test-archetypes</id>
                <goals><goal>run</goal></goals>
                <phase>integration-test</phase>
                <configuration>
                  <!-- Maven Way is to not fail during integration-test, and check that tests
                       succeeded in the 'verify' phase. -->
                  <failOnError>false</failOnError>
                  <!-- FIXME Find a way to detect failure beyond scanning for missing files -->
                  <target>
                    <property name="lenskit.version"
                              value="${project.version}"/>
                    <ant antfile="${basedir}/src/test/ant/test-archetypes.xml"
                         target="all-tests">
                      <!--
                       Maven only exports POM value to Ant, not command-line value.
                       re-export here to get the right value.
                      -->
                      <property name="data.movielens.100k"
                                value="${data.movielens.100k}"/>
                    </ant>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <!-- Verify the archetype test runs. -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <!-- The integration tests don't fail when run. We'll use enforcer to make sure that the
               right output files are present, indicating that the archetypes ran correctly. The
               Java-based integration tests are picked up by the failsafe plugin. -->
              <execution>
                <id>verify-archetype-output</id>
                <goals><goal>enforce</goal></goals>
                <phase>verify</phase>
                <configuration>
                  <rules>
                    <requireFilesExist>
                      <files>
                        <file>${archetype.test.directory}/test-simple-analysis/eval-results.csv</file>
                        <file>${archetype.test.directory}/test-simple-analysis/accuracy.pdf</file>
                        <file>${archetype.test.directory}/test-simple-analysis/speed.pdf</file>
                        <file>${archetype.test.directory}/test-fancy-analysis/target/analysis/speed.pdf</file>
                        <file>${archetype.test.directory}/test-fancy-analysis/target/analysis/accuracy.pdf</file>
                        <file>${archetype.test.directory}/test-fancy-analysis/target/analysis/eval-results.csv</file>
                      </files>
                    </requireFilesExist>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>

    </profile>
  </profiles>

</project>
