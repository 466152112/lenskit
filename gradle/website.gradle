/*
 * Build system for LensKit, and open-source recommender systems toolkit.
 * Copyright 2010-2014 Regents of the University of Minnesota and contributors
 * Work on LensKit has been funded by the National Science Foundation under
 * grants IIS 05-34939, 08-08692, 08-12148, and 10-17697.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither the name of the University of Minnesota nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.slf4j.LoggerFactory
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.api.TransportConfigCallback
import org.eclipse.jgit.util.FS
import org.eclipse.jgit.storage.file.FileRepositoryBuilder
import org.eclipse.jgit.transport.*
import com.jcraft.jsch.JSch
import com.jcraft.jsch.Session
import org.grouplens.lenskit.build.SshLogger

class GitDeploySessionFactory extends JschConfigSessionFactory {
    final Project project

    GitDeploySessionFactory(Project prj) {
        project = prj
    }

    void configure(OpenSshConfig.Host host, Session session) { }

    JSch createDefaultJSch(FS fs) {
        def sch = super.createDefaultJSch(fs)
        sch.logger = new SshLogger();
        sch.removeAllIdentity()
        sch.addIdentity(project.file('etc/deploy.rsa').absolutePath)
        return sch
    }
}

class HeadlessCredentialsProvider extends CredentialsProvider {
    def logger = LoggerFactory.getLogger(getClass())

    boolean isInteractive() {
        return false;
    }

    boolean get(URIish uri, CredentialItem... items) {
        for (item in items) {
            logger.info('want credential type {} w/ prompt {}',
                        item.class, item.promptText)
            if (item instanceof CredentialItem.StringType) {
                item.value = System.getenv('DEPLOY_KEY_PASSPHRASE')
            } else {
                return false;
            }
        }
        return true;
    }

    boolean supports(CredentialItem... items) {
        return true
    }
}

class DeployConfigCallback implements TransportConfigCallback {
    final Project project

    DeployConfigCallback(Project prj) {
        project = prj
    }

    void configure(Transport transport) {
        if (transport instanceof SshTransport) {
            transport.sshSessionFactory = new GitDeploySessionFactory(project)
        }
        transport.credentialsProvider = new HeadlessCredentialsProvider()
    }
}

class Website {
    def String repo = 'lenskit/lenskit.github.io'
    def Project project

    def getDirectory() {
        project.file("$project.buildDir/website")
    }

    def getGitTransport() {
        return new DeployConfigCallback(project)
    }
}
extensions.create('website', Website)
website.project = project

task fetchSite {
    mustRunAfter javadoc

    doLast {
        def cmd = Git.cloneRepository()
        cmd.setURI "git@github.com:${website.repo}.git"
        cmd.directory = website.directory
        cmd.transportConfigCallback = website.gitTransport
        cmd.branch = 'master'
        try {
            cmd.call()
        } catch (Exception ex) {
            logger.error 'Git error {}', ex
            throw new RuntimeException('git error', ex)
        }
    }
}

task copyJavadoc(type: Sync, dependsOn: [javadoc, fetchSite]) {
    from javadoc.destinationDir
    into "$website.directory/master/apidocs"
}

task uploadWeb {
    dependsOn copyJavadoc
}

uploadWeb << {
    logger.info 'adding files'
    exec {
        workingDir website.directory
        executable 'git'
        args 'add', '-A', 'master/apidocs'
    }
    def repo = new FileRepositoryBuilder().findGitDir(website.directory).build()
    def git = new Git(repo)
    try {
        logger.info 'committing'
        git.commit()
           .setAuthor('LensKit CI', 'travis@lenskit.org')
           .setCommitter('LensKit CI', 'travis@lenskit.org')
           .setMessage("Results of build $travis.buildNumber")
           .call()
        logger.info 'pushing'
        git.push()
           .setRemote('origin')
           .setRefSpecs(new RefSpec('master:master'))
           .setTransportConfigCallback(website.gitTransport)
           .call()
    } finally {
        git.close()
    }
}
