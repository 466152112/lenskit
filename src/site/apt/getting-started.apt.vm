                -------------------------------------
                           Getting Started
                -------------------------------------

Overview

  The basic process to create a project using LensKit follows these
  steps:

  [[1]] Create a new Maven project that depends on <<<lenskit-core>>>
        and the packages providing the recommenders you want (such as
        <<<lenskit-knn>>>).  In Eclipse with
        {{{http://m2eclipse.sonatype.org/}M2Eclipse}}, this can be
        done easily from the New Project wizard.  See
        {{{http://www.sonatype.com/developing-with-eclipse-and-maven-book.html}Developing
        with Eclipse and Maven}} for more information on using Maven
        in Eclipse.

  [[2]] Configure a recommender builder.

  [[3]] Configure the data source for recommendation.

  [[4]] Use the builder and a <<<RatingBuildContext>>> derived from
        the data source to build a recommender.

Creating a Project

  While it is possible to download LensKit jars, all dependency jars,
  and use them in your build, we highly recommend using Maven (or a
  compatible tool such as Ivy) to manage dependencies in your project.
  To get started, create a new Maven project in Eclipse, NetBeans, or
  at the command line:

+--------------------------------------+
  mvn archetype:create -DarchetypeGroupId=org.apache.maven.archetypes \
      -DgroupId=org.myorg.app -DartifactId=my-app
+--------------------------------------+

  Edit the POM to add <<<LensKit-core>>> as a dependency (Eclipse will
  make this easy, allowing you to search through the Maven Central
  repository for LensKit once it is published there).  The XML to do this is:

+---------------------------------------+
  <dependency>
    <groupId>org.grouplens.lenskit</groupId>
    <artifactId>lenskit-core</artifactId>
    <version>${project.version}</version>
  </dependency>
+---------------------------------------+


  For more introductory material, see the
  {{{http://maven.apache.org/guides/getting-started/index.html}Maven
  Getting Started Guide}}.

* Maven reference materials

  Maven has a fair amount of documentation at its
  {{{http://maven.apache.org}home page}}.  Sonatype has also provided
  free online access to some books on it:

  * {{{http://www.sonatype.com/books/mvnex-book/reference/public-book.html}Maven by Example}}

  * {{{http://www.sonatype.com/books/mvnref-book/reference/public-book.html}Maven: The Complete Reference}}

  * {{{http://www.sonatype.com/developing-with-eclipse-and-maven-book.html}Developing with Eclipse and Maven}}

  []

Configuring and Creating the Recommender

  The recommender implementations in LensKit are highly modular to
  allow their behavior to be customized and to allow individual pieces
  to be individually replaced.  LensKit builder classes provide
  properties to configure recommender behavior and allow subcomponents
  to be specified via their respective builders.  Further, builders
  memoize their results, so expensive object construction is not
  repeated unnecessarily so long as builder instances are shared where
  appropriate.

  After configuring a builder, you also need to configure your data
  source.  The recommendation framework depends on having access to
  data sources via the <<<RatingDataAccessObject>>> interface.

  Once you have a builder and a data access object, create a new
  rating build context (<<<PackedRatingBuildContext>>>) from the DAO
  and provide it to the builder:

+-----------------------------------------------------------------+
  RecommenderComponentBuilder<Recommender> builder = new ItemItemRecommenderBuilder();
  RatingDataAccessObject dao = new SimpleFileDAO(fileName);
  RatingBuildContext context = null;
  dao.openSession();
  try {
      context = PackedRatingBuildContext.make(dao);
      Recommender rec;
      rec = builder.build(context);
  } finally {
      if (context != null)
          context.close();
      dao.closeSession();
  }
  RatingRecommender recommender = rec.getRatingRecommender();
  /* open a session, use the recommender, close the session. */
+-----------------------------------------------------------------+

Further Topics

  See the {{{./design.html}design document}}} for information on how
  LensKit was designed and why.  Also, the {{{./apidocs/}API
  documentation}} and the {{{./xref/}sources}} provide more
  information about how LensKit works and how to use it.

Getting LensKit from Mercurial

  If you want to use the latest and greatest LensKit code, you can get
  it from the {{{http://dev.grouplens.org/hg/lenskit}Mercurial
  repository}}.  Clone the repository and install it to your local
  Maven repository:

+--------------------------------------+
  $ hg clone http://dev.grouplens.org/hg/lenskit
  $ cd lenskit
  $ mvn install
+--------------------------------------+

  This will build the jars and make them available to other Maven
  projects.

  You can also load LensKit into an Eclipse or NetBeans workspace.
  Unfortunately, you cannot use M2Eclipse's "Check Out from Version
  Control" feature since they do not have Mercurial support; however,
  if you clone on the command line, you can import the project as an
  existing Maven project.  If you have MercurialEclipse installed, it
  will automatically detect that LensKit is a Mercurial project.
