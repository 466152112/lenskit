                -------------------------------------
                       Evaluating Recommenders
                -------------------------------------

Using the Evaluator

  LensKit provides an offline evaluation framework for testing
  recommenders.  It is in the <<<lenskit-eval>>> subpackage.  The
  resulting jar, however, does not include the core or any
  recommenders.  We have created a {{{./lenskit-eval-ant-plugin/}Ant
  plugin}} that takes care of running the recommender as a Maven task.
  For now, that is the only supported means of running recommender
  evaluations.

Configuring Recommenders

  Recommenders are configured using JavaScript.  The script is
  responsible for setting up the recommender and configuring its
  parameters.  Multiple configurations can be generated from a single
  script.

  Here's a simple script that demonstrates configuring user-user CF:

%{snippet|file=lenskit-knn/etc/useruser.js}

Running the Evaluator

  Since the evaluator is a Maven plugin, you configure it from a
  build.xml.  The following XML configures the evaluator to run with
  the MovieLens 100K data set against a recommender script in
  <<<etc/itemitem.js>>>.

+--------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<project name="LensKit Evaluation Suite" basedir="."
         xmlns:lk="antlib:org.grouplens.lenskit.eval.ant"
         xmlns:ac="antlib:net.sf.antcontrib">
  <property name="build.dir" location="${basedir}/target" />
  <property name="csv.dir" location="${build.dir}"/>
  <property name="scripts.dir" location="${basedir}/etc"/>
  <property name="data.dir" location="${basedir}/data" />

  <target name="init">
    <condition property="datasets.100k.uptodate">
      <uptodate srcfile="${basedir}/data/ml-100k/u.data"
                targetfile="${build.dir}/ml-100k.stamp"/>
    </condition>
  </target>

  <target name="import-100k" depends="init"
          unless="datasets.100k.uptodate">
    <mkdir dir="${build.dir}/datasets"/>
    <delete failonerror="false" verbose="true">
      <fileset dir="${build.dir}/datasets" includes="ml-100k.*.db"/>
    </delete>
    <lk:split dataFile="${data.dir}/ml-100k/u.data"
              dbFile="${build.dir}/datasets/ml-100k.%d.db"/>
    <touch file="${build.dir}/ml-100k.stamp"/>
  </target>

  <macrodef name="eval">
    <attribute name="data" default="ml-100k"/>
    <attribute name="name"/>
    <sequential>
    </sequential>
  </macrodef>
  
  <target name="useruser" depends="import-100k">
    <lk:traintest script="${scripts.dir}/useruser.js"
                  output="${csv.dir}/useruser.ml-100k.csv">
      <databases dir="${build.dir}/datasets">
        <include name="ml-100k.*.db"/>
      </databases>
    </lk:traintest>
  </target>
</project>
+--------------------------------------------+

  LensKit must be available on the classpath.  An easy way to do this
  is to run the <<<package>>> target in the LensKit source tree and
  copy all the JARs from <<<lenskit-package/target/jars>>> directory
  to your Ant lib directory.  Alternatively, you can run Ant from
  Maven with the
  {{{http://maven.apache.org/plugins/maven-antrun-plugin/}AntRun
  plugin}}} to pull in LensKit.

Processing Output

  The evaluation framework produces CSV files, so the output can be
  analyzed and summarized in R, OpenOffice.org, Excel, or any other
  data analysis tool that can import CSVs.
