                        ---------------------
                        LensKit Release Notes
                        ---------------------

#macro ( issue $id )##
{{{http://dev.grouplens.org/trac/lenskit/ticket/$id}#$id}}##
#end

LensKit Release Notes

* Release 1.0

  The {{{https://bitbucket.org/grouplens/lenskit}Mercurial changelog}} and the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=1.0}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  This release includes many documentation improvements and general cleanups from
  the 0.11.

** Core

   * Added <<<set>>> method for setting parameters.

   * Recommender engine factories now throw a checked <<<RecommenderBuildException>>>.

   []

** Algorithms

   * Factored out FunkSVD stopping conditions, made default now 100 iterations. If you
     want a delta RMSE threshold, use <<<ThresholdStoppingCondition>>> and set the
     <<<ThresholdValue>>> parameter.

   * Moved FunkSVD to the <<<o.g.l.mf.funksvd>>> package.

   * Made Slope-One use k-NN, specifically item-item, as the base framework rather than
     being standalone. Future tasks will further harness and develop this merger.

   * Support item vector normalizers for the item-item similarity matrix (see
     <<<NormalizingSimilarityMatrixAccumulatorFactory>>>.

   * Move vector similarity code into <<<o.g.l.vectors.similarity>>>.

   * Made item-item clamp predictions to the preference domain, if it is available.

   []

** Evaluator

   * Evaluation scripts now have access to command line arguments (#issue(138)).

   * Added support for a block form of the <<<within>>> directive.

   * Added the <<<dumpGraph>>> command to dump recommender configurations to GraphViz.

   * Added new archetype to aid in creating evaluation projects.

   []

** Cleanup

   * Removed all deprecated methods.

   []

* Release 0.11

  The primary focus of this release is making LensKit use {{{http://bitbucket.org/grouplens/grapht}Grapht}}
  rather than PicoContainer, with additional refactorings of components to more
  effectively take advantage of Grapht. We also made significant improvements to how
  the evaluator works to allow evaluation scripts to be more flexible, and made a number
  of other improvements and bug fixes.

  There are a number of backwards-incompatible changes in this release. Configurations and
  algorithm implementations will definitely need to be updated; other client code may need
  updates as well.

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.11}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  * Made <<<SparseVector>>> return <<<VectorEntry>>> objects when iterated,
    rather than <<<Long2DoubleMap.Entry>>> instances. All code that iterates over sparse
    vectors will need to be updated.

  * Added methods to <<<ItemScorer>>> and <<<GlobalItemScorer>>> to output scores to sparse
    vectors.

  * Begun documenting {{{./versioning.html}API stability}} (#issue(103)).

  * Events are no longer <<<Cloneable>>>, and the <<<clone>>> method is now a deprecated
    alias for <<<copy()>>>.

  []

** Algorithm Changes

  * The default user similarity for user-user CF is now cosine rather than Pearson.

  * Item-item models can now have unbounded size and have rows truncated by threshold
    value rather than size (#issue(171)).

  * FunkSVD now incorporates user ratings at predict time (#issue(174)).

  []

** Component Refactoring

  This release contains a lot of algorithm and component refactorings. The public recommender
  API is unchanged, but many components and their interfaces have changed. This means that
  custom components and recommender configurations will need to be updated.

  * Added <<<@Shareable>>> annotation for components that can be put in the model build
    and shared between recommender sessions. All shareable components must now be annotated
    with this annotation (or configured via instance bindings), or they will not be pre-built.

  * Removed <<<MinRating>>> and <<<MaxRating>>> (deprecated in release 0.10).
    Code should use <<<PreferenceDomain>>> instead. See #issue(163).

  * Renamed <<<RatingSnapshot>>> and related classes to <<<PreferenceSnapshot>>>,
    since that's what it really is.

  * Removed many annotations formerly used as dependency qualifiers (see
    #issue(168)).

    * <<<@NormalizedSnapshot>>>: components that formerly used this qualifier should depend on
      <<<userNormalizedPreferenceSnapshot>>> or use the normalizer directly.

    * <<<@NormalizerBaseline>>>: use a context-sensitive binding on
      <<<BaselineSubtractingNormalizer>>>.

    * <<<@PredictNormalizer>>>: use context-sensitive bindings. Usually this will require using
      context-sensitive bindings to bind the <other> normalizers.

    * <<<@UserHistorySummary>>>: was redundant with the component interface.

    * <<<@UserVectorNormalizer>>>: refactored into a separate <<<UserVectorNormalizer>>> interface,
      the default implementation of which delegates to a generic vector normalizer.
      Context-sensitive bindings configure the inner normalizer. <<<BaselineSubtractingNormalizer>>>
      has become <<<BaselineSubtractingUserVectorNormalizer>>> and implements the new interface.

    * <<<@ItemSimilarity>>>: factored into <<<ItemSimilarity>>> interface, with default
      implementation delegating to <<<VectorSimilarity>>>.

    * <<<@UserSimilarity>>>: factored into <<<UserSimilarity>>> interface, with default
      implementation delegating to <<<VectorSimilarity>>>.

    * <<<@WeightedSimilarity>>>: removed in favor of context-sensitive bindings.

    * Dropped <<<@ClampingFunction>>> (and <<<DoubleFunction>>>) in favor of a
      <<<ClampingFunction>>> interface. The new interface provides the user and item IDs, too.

    []

  * Renamed <<<HistorySummarizer>>> to <<<UserHistorySummarizer>>>, and renamed base classes.

  * Moved normalizers and quantizers into subpackages of <<<o.g.l.transform>>>.

  * Refactored similarities for k-NN recommenders. <<<Similarity>>> became <<<VectorSimilarity>>>,
    without a generic parameter, and <<<OptimizableVectorSimilarity>>> and <<<SymmetricBinaryFunction>>>
    have been replaced by methods on similarity interfaces.

  * Removed <<<ItemVector>>> and <<<UserVector>>> classes. User and item IDs are now carried
    independently and we use distinct component interfaces to handle users and items.

  []

* Release 0.10

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.10}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

** Evaluation

  * Rewrote evaluator configuration to use Groovy rather than XML+JavaScript. The result is
    much more readable & easier to extend.  See the
    {{{http://medusa.cs.umn.edu/trac/lenskit/wiki/Manual/Evaluator}manual entry}} for
    documentation of the evaluator.  This also allows crossfolding to be done and written to
    disk independent of actual train-test evaluation.

  * Enhance train-test predict metrics to support per-user results (written to a separate
    table), and to have knowledge of starting and stopping the evaluation (to support
    additional accumulation of results that doesn't fit in the per-user or per-run paradigm).

  * Allow demo & smoke-test to use a local copy of the ML-100K data set.

  * Evaluator inputs & outputs transparently support GZip compression if the file names end in
    ".gz".

  * Reworked evaluation command line arguments for new Groovy-based support. Evaluation now
    takes a single file with the <<<-f>>> option (defaults to <<<eval.groovy>>>), and the
    remaining command line arguments are task names.

  * Metrics for the train-test code now take test users, in the form of <<<TestUser>>>, rather
    than ratings & predictions. This allows them to measure recommendations, access training
    history, and gives us flexibility to let them do even more in the future.

  []

** Algorithms

  * Made item-item CF use <<<ItemVector>>> rather than just <<<ImmutableSparseVector>>> for
    representing item vectors and querying for their similarities.

  * Defined the direction similarities are used in the item-item recommender and made it
    consistent and correct in the face of asymmetric similarity functions such as conditional
    probability (#issue(131)). The similarity functions are now better-documented.

  * Support unlimited neighborhood sizes (but not yet model sizes) in item-item recommender.

  * Made <<<ItemItemModel>>> an interface, so alternative sources of neighborhoods with similarity
    scores can be used. The default implementation uses a similarity matrix as before.

  * Added global recommenders and scorers that compute for items with respect to other items
    but independent of particular users, useful for creating “more like this” or “related items”
    views (#issue(125)).

    * General API — see the <<<GlobalItemScorer>>> and <<<GlobalItemRecommender>>> classes.

    * Implementation of global recommenders for item-item CF.

    []

** Cleanup and Refactoring

  * Moved predict evaluators to <<<o.g.l.eval.metrics.predict>>> and renamed the base
    interface to <<<PredictEvalMetric>>>.

  * Refactored cursor implementations:

    * Renamed <<<AbstractRatingCursor>>> to <<<AbstractEventCursor>>> and made it handle
      any event.

    * Made <<<AbstractPollingCursor>>> support fast polling, and make <<<AbstractEventCursor>>>
      extend it.

    * <<Incompatible change>>: renamed <<<ScannerRatingCursor>>> to
      <<<DelimitedTextRatingCursor>>>, and made it use buffered readers (via
      <<<DelimitedTextCursor>>>) rather than scanners. Only affects code that uses
      the scanner rating cursor directly.

    * <<Incompatible change>>: removed support for URL-backed streams from
      <<<SimpleFileRatingDAO>>>. If support for generic streams are needed, we can re-add
      this with <<<InputSupplier>>>s from Guava.

    []

  * Replaced <<<TaskTimer>>> by commons-lang3 <<<StopWatch>>>. Any code using <<<TaskTimer>>>
    will need to be updated.

  * Removed now-unnecessary data tree code.

  []

* Release 0.9

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.9}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  * Clean up documentation, warnings, and documenting annotations in
    several places. Also made many style fixes.

  * Fix the <<<ItemScorer>>> inheritance hierarchy by making
    <<<AbstractItemScorer>>> implement <<<ItemScorer>>> rather than
    <<<RatingPredictor>>>, and make subclasses implement
    <<<RatingPredictor>>> directly.
  
  * Revise <<<SparseVector>>> definition and implementations to have a
    well-defined notion of "key domain" and "key set", where the key set
    is the set of keys with values drawn from the key domain. This allows
    <<<MutableSparseVector>>>s to be used to build up vectors in a well-defined
    fashion without using NaN. With this update, the <<<keySet>>> method will
    only return defined keys (use <<<keyDomain>>> to access the key domain), and
    NaN will only show up due to mathematical error, never due to temporary slots
    being unfilled.
    
  * Updated versions of several dependencies.

  * <<<EventCollectionDAO>>> factory updates - add <<<wrap>>> methods that wrap other
    DAO factories in immediate or soft event collection DAO factories, making it easier
    to use <<<EventCollectionDAO>>> for a cache of disk-backed DAOs.  Also made the
    <<<SoftFactory>>> take a <<<Supplier>>> rather than <<<Provider>>>.

  []

** Evaluation runner

   * Output separate data set and segment number fields.
   
   * Support fractional (e.g. 20%) holdouts in addition to remove-K.
   
   * Reinstate per-user MAE (MAE.ByUser).

   * Use <<<.eval-cache>>> as default cache directory.

   * Add evaluation listener framework for future evaluation monitor
     consoles.
   
   * Renamed profile for running the evaluation demo - it is now activated with
     <<<demo>>> (rather than <<<smoketest>>>).

   * Rearrange evaluator code to the crossfolding logic is in its own package.
   
   []

** Cleanup

   Several unused classes have been removed:

   * <<<IndexedItemScore>>>
   
   * <<<IntSortedArraySet>>>

   []

* Release 0.8.1

  Bugfix release.

  * Fix off-by-1 error in packed rating snapshot that occurs in
    certain conditions with unrate events (#issue(121)).

  * Make <<<UserVector>>> construction from histories always return
    complete vectors.

  []

* Release 0.8

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.8}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  * Cleaned up cursor utilities, moving all methods from
    <<<Cursors2>>> to <<<Cursors>>>.  The old <<<Cursors2>>> methods
    are deprecated and will be removed before 1.0 is released.

  * Implemented a new evaluation framework that uses XML files to
    directly configure evaluators (#issue(115)).  This replaces the
    Ant plugin.  Eventually, a Maven plugin will be added that runs
    these evaluations; for now, they can be run with
    {{{http://mojo.codehaus.org/exec-maven-plugin}exec-maven-plugin}}.
    See the <<<lenskit-eval-demo>>> project configuration for an
    example.  With this comes the fix for #issue(115) as well.

  * Provide example evaluation configurations run as integration
    tests.  <<<lenskit-eval>>> contains a basic one, and
    <<<lenskit-eval-demo>>> contains a more extensive set complete
    with R-based post-analysis.  To run these, activate the
    <<<smoketest>>> profile and set the
    <<<grouplens.mldata.acknowledge>>> property to <<<yes>>> to
    acknowledge that you are abiding by the licensing terms for the
    {{{http://www.grouplens.org/node/73}MovieLens ML100K data set}},
    which is automatically downloaded and used by the demo
    evaluations.

  []

* Release 0.7

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.7}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  * Fixed a couple bugs in the sparse vector copy methods.

  * Split new modules <<<lenskit-data-structures>>> and
    <<<lenskit-api>>> out of <<<lenskit-core>>> to contain interesting
    data structures we use.  The main purpose of the API abstraction
    is to make the core recommendation API in a separate module so
    that re-implementing it on top of another framework such as Mahout
    does not pull in all of LensKit.  It will also provide us a good
    layer at which to make API stability guarantees.

    This resulted in some additional class moves:

    * Moved sorted array sets, scored lists, and interval lists into
      the <<<o.g.l.collections>>> package.

    * Renamed <<<o.g.l.data.vector>>> to <<<o.g.l.vectors>>> and moved
      the <<<UserVector>>> and <<<ItemVector>>> classes into
      <<<o.g.l.data.history>>>.

    * Pushed DAO-based <<<open>>> method from <<<RecommenderEngine>>>
      to <<<LenskitRecommenderEngine>>>, as the API layer knows
      nothing about DAOs.

    * Pushed <<<getDataAccessObject()>> from <<<Recommender>>> down
      to <<<LenskitRecommender>>>.

    * Moved <<<UserHistory>>> and <<<Event>>> interfaces into
      <<<o.g.l.data>>> in the <<<lenskit-api>>> packages.  The
      implementations remain in <<<lenskit-core>>> in their respective
      <<<.history>>> and <<<.event>>> packages.

    * Moved <<<SortOrder>>> into the DAO package.

    * Moved <<<Index>>> and <<<Indexer>>> to <<<o.g.l.util>>>.

    * Moved abstract classes, <<<Lenskit*>>> classes, and
      <<<Builder>>> from <<<o.g.lenskit>>> to <<<o.g.lenskit.core>>>,
      so only <<<lenskit-api>>> provides classes directly in
      <<<org.grouplens.lenskit>>>.

    []

  * Moved cursors from GL Common into <<<lenskit-data-structures>>> in
    the new package <<<org.grouplens.lenskit.cursors>>>.

  []

* Release 0.6

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.6}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  * Fixed a bug where FunkSVD crashed when predicting for a user not in
    the model.

  * Added history summarizers to compute vector summaries of user
    histories.  This paves the way for non-rating-based scorers.

  * Updated to <<<gl-common>>> 0.4, including the new citation JavaDoc
    taglet.  More citations in the JavaDoc to come.

  * Added version of <<<MutableSparseVector.freeze()>>> that strips NaN
    values in the frozen vector.

  * Fixed a couple bugs in the user-user rating predictor with how
    baselines were added and what happens when the total similarity
    for an item is 0.

  * Build our first basket recommender (see #issue(3)).  It isn't
    tested in basket configuration yet, but item-item CF is now
    sufficiently modular to operate in unary contexts.

    * Added <<<NeighborhoodScorer>>> abstract scoring items based on
      neighborhoods.  <<<WeightedAverageNeighborhoodScorer>>>
      implements the traditional weighted average algorithm that has
      been in item-item CF since we implemented it, and
      <<<SimilaritySumNeighborhoodScorer>>> just sums similarities
      (useful for unary contexts).

    * Split <<<ItemItemRatingPredictor>>> apart into
      <<<ItemItemScorer>>>, which uses arbitrary histories and
      <<<NeighborhoodScorer>>>s to score items, and
      <<<ItemItemRatingPredictor>>> which configures it to be a rating
      predictor.

    []

  []

* Release 0.5

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.5}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  * Reworked <<<IndexedPreference>>>, making it an interface that can
    be backed by indirect implementations in rating snapshots.  This
    seems to be faster.  Also added <<<getIndex()>>> method, returning
    a global index for the preference within a snapshot.

  * Adjusted the FunkSVD model builder to use global indices and an
    array of estimates, making model builds much faster.

  * Dropped by-user MAE from MAE evaluator and renamed “MAE.ByRating”
    in output to “MAE”, as per-user and global MAE are equivalent.

  * Moved <<<TaskTimer>>> to <<<lenskit-core>>> so it is available for
    logging elapsed times in algorithm implementations.

  []

* Release 0.4

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.4}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

* Recommendation and Prediction API

  To support more types of recommenders easily, we have changed the
  way the dynamic recommendation and prediction components and their
  APIs work (#issue(109), #issue(110)).  These changes are
  backwards-incompatible; client code and implementations need to be
  updated for 0.4.

  * Introduced <<<ItemScorer>>>, an generalization of prediction that
    scores items for users.

  * Made <<<RatingPredictor>>> an <<<ItemScorer>>>, and deleted its
    <<<predict(...)>>> methods in favor of the item scorer methods.
    It now serves as a type-level indicator that a scorer returns
    predicted preferences as scores.

  * Removed dynamic interfaces in favor of putting the history-based
    methods directly in the <<<ItemScorer>>> and <<<ItemRecommender>>>
    interfaces.  An added <<<canUseHistory()>>> method on each
    interface indicates whether the history will be used or ignored.
    This greatly simplifies the inheritence hierarchy for recommender
    components.

  * Changed the behavior of item recommenders when a <<<null>>>
    exclude set is provided.  Previously, this was equivalent to the
    empty set.  It is now equivalent to a default exclude set which
    will be recommender-specific but generally a set of items the user
    is unlikely to need recommended (such as all items they have
    rated).  All recommenders have been updated with this change.

    The old design was easier to slightly implement but made less
    sense from a client API perspective.  The new design, where
    <<<null>>> is the default exclude set, makes the API cleaner (the
    fully-general method can use default exclude sets).  The loosened
    specification of default exclude sets also gives us greater
    flexbility for LensKit to be used as a basis for novel
    recommendation approaches.

  []

** Incompatible data structure changes

  To clean up APIs, we made a couple notable incompatible changes to
  layout and data structures.  These are all compile errors; no subtle
  behavior changes that the compiler won't catch here.

  * Moved <<<UserHistory>>> and related classes to the
    <<<org.grouplens.lenskit.data.history>>> package.

  * Removed <<<ItemRatingVector>>> and <<<UserRatingVector>>>, as they
    type distinction severely complicates configuration for
    generalized model builders.  The upside: types remain sane and
    configuring basket recommenders will be feasible.  Downside: the
    type system doensn't indicate whether a user vector contains
    ratings or some other data.

  []

** Other Changes

  * Changed <<<DynamicRatingPredictor.predict(long, Collection,
    Collection)>>> to take a <<<UserHistory>>> of events rather than a
    collection of ratings.

  * Made abstract recommenders and predictors uniformly expose the DAO
    as a protected final field.

  * Added methods to <<<DataAccessObject>>>, with default
    implementations in the abstract implementation, to allow user
    history objects to be directly retrieved for given users.

  * Added snapshotting as an explicit concept to the data layer.
    <<<DAOFactory>>> now has a <<<snapshot()>>> method, which is
    supposed to return an immutable snapshot of the data for
    test/build purposes.  Iterative algorithms still use rating
    snapshots, as they're faster and provide indexing, but this allows
    us to be more flexible in what kinds of data access recommender
    component builders can perform.  Factory implementations now need
    to provide a snapshot method; this can be done by simply creating
    an event collection DAO from the events.  Users with large data
    sets may want to use more exotic methods like database replication
    or transactions.

    The <<<JDBCRatingDAO>>> factory makes snapshotting configurable.
    By default, it assumes the database is unchanging; it can be
    configured to take an in-memory snapshot and return an
    <<<EventCollectionDAO>>>.

  []

* Release 0.3.1

  This release just contains a single change that should have been in
  0.3 (and is, unfortunately, backwards-incompatible):

  * Removed the generic parameter from <<<DAOFactory>>>.  We will be
    ensuring in a later release that the dependency injection
    mechanism allows subclasses of <<<DataAccessObject>>> to be
    visible as such.

  []
  

* Release 0.3

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.3}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

** Event Infrastructure

  For flexibility going forward, LensKit 0.3 introduces a new
  <<<Event>>> infrastructure (#issue(48)) for representing user data.
  Users have sequences of events, represented by the <<<Event>>>
  interface.  Each event has an ID and an optional timestamp.  Events
  may be associated with items (subclasses of the <<<ItemEvent>>>
  interface).  Ratings are now <<rating events>>; they store a
  <<<Preference>>>, which represents the preference expressed by the
  user.  All of these interfaces and classes have been moved to the
  package <<<org.grouplens.lenskit.data.event>>> (with the preferences
  in <<<o.g.l.d.pref>>>).

  As a result of this, all ratings must now have globally-unique
  rating IDs (which are synthesized when they are not present in the
  data set).  Rating object equality is now defined solely by the
  event ID as well.  Also, the <<<Ratings.fromUserVector>>> method has
  been removed, as it no longer works.

  Rating snapshots now discard timestamps and return
  <<<IndexedPreference>>> objects, and the <<<IndexedRating>>> object
  has gone away.

  User profiles have also been changed; the <<<UserRatingProfile>>>
  class has been removed and replaced with <<<UserHistory>>> for a
  generalized representation of user histories.

*** Restructured DAO interfaces

   The new event infrastructure has necessitated some overhauling of
   the DAO interface.  The new interface is hopefully simpler.  There
   are no longer multiple DAO interfaces in LensKit; everything is
   consolidated into the <<<DataAccessObject>>> interface (and the old
   <<<UserItemDataAccessObject>>> and <<<RatingDataAccessObject>>>
   interfaces have been removed).  The methods are renamed to be
   <<<getEvents>>> and friends.  Also, sorting is no longer supported
   for item and user event sequences.  

   Integrators may still wish to subclass <<<DataAccessObject>>> to
   make additional information, such as user or item metadata,
   available to recommenders.

   Implementations have also been renamed:

   * <<<SimpleFileDAO>>> has been renamed to
     <<<SimpleFileRatingDAO>>>, as it only supports rating data.

   * <<<RatingCollectionDAO>>> has been renamed to
     <<<EventCollectionDAO>>>.  It contains some optimizations to
     speed filtering.

   []

** Other Changes

  * The deprecated <<<SparseVector.wrap>>> methods now return
    <<<SparseVector>>> rather than <<<MutableSparseVector>>>, so that
    they can be overridden in <<<ImmutableSparseVector>>>.

  * Removed <<<NoSessionException>>>, as it has not been in use for
    some time.

  * <<<PackedRatingSnapshot>>> now randomizes the order of ratings in
    the snapshot to prevent ordering effects from impacting iterative
    methods.

  * Updated to GL Common 0.3.  This introduces the requirement that
    all elements in cursors be non-null.

  * Made <<<IdentityVectorNormalizer>>> serializable (#issue(106)).

  * Fixed bug where the recommender engine opened multiple DAOs for
    each session (#issue(108)).

  * Made POMs runnable with Maven 2, so Maven 2 can be used to compile
    LensKit (although it cannot generate the site) (#issue(72)).

  []


* Release 0.2

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.2}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

** Core changes

  * Introduce user- and item-associated sparse vectors, including
    rating-specific variants of them, to allow types to express what
    kind of data is being operated on and to allow normalizers to be
    generalized.

    This results in changes to several interfaces, and to much code
    where item or user IDs are tracked and associated with vectors.
    This change likely introduces additional vector copying, but in
    the future we will be measuring ways to reduce this.

  * Abstract <<<UserRatingVectorNormalizer>>> into
    <<<VectorNormalizer>>> to apply to different vectors associated
    with entities such as users or items.

    With this change, several normalization-related classes have been
    renamed to better-reflect their nature.  Also, the normalization
    interface has been changed to only take reference and target
    vectors; normalization implementations that require user or item
    IDs should require the relevant type of sparse vector.

    Annotations and generic type arguments are used to indicate what
    the vector normalizer is normalizing.

  * Add the <<<freeze()>>> method to <<<MutableSparseVector>>>,
    returning an immutable vector from its data and rendering it
    invalid.

  []

*** Compatibility notes

  Backwards-incompatible core changes:

  * Renamed <<<UserVarianceNormalizer>>> to
    <<<MeanVarianceNormalizer>>>.

  * Renamed <<<NormalizedRatingSnapshot>>> to
    <<<UserNormalizedRatingSnapshot>>>.

  * Renamed <<<AbstractUserRatingVectorNormlizer>>> to
    <<<AbstractVectorNormalizer>>>.

  * Renamed <<<IdentityUserRatingVectorNormlizer>>> to
    <<<IdentityVectorNormalizer>>>.

  * Many operations that took a user or item ID and a
    <<<SparseVector>>> now use a <<<UserVector>>>, <<<ItemVector>>>,
    or a rating-specific subtype.  This affects the
    <<<DynamicRatingPredictor>>> and
    <<<DynamicRatingItemRecommender>>> interfaces and all their
    subclasses.

  * <<<UserRatingVectorNormalizer>>> has been replaced with
    <<<VectorNormalizer<? super UserRatingVector>>>> and its interface
    has been changed.

  []

** Evaluator changes

  * Add boolean <<<isolate>>> option to the train-test Ant task to
    process datasets one at a time rather than parallelizing
    evaluations across this one.  Useful for reducing memory
    consumption evaluations on large data sets.

  []

* Release 0.1

  The first beta release!  What this means for the future is that our
  core APIs (such as the recommenders and predictors) are pretty
  stable, and future changes to them will be documented and called out
  in the release notes.  In general, future release notes will be more
  detailed, as we're working on adding more features and stabilizing
  LensKit to a 1.0 release.

  This release contains many changes.  Highlights include:

  * Restructuring of recommendation and prediction interfaces to keep
    rating-based recommendation cleanly separated from more generic
    interfaces and facilitate reuse of predictor-based recommendation
    logic.

  * Removed <<<ScoredId>>> in favor of <<<ScoredLongList>>> for the
    recommendation API.

  * Added Slope-One recommenders.

  * Lots of bugfixes.

  * Increased parallelism in the evaluators (evaluators are now
    parallized per-configuration rather than per-dataset, decreasing
    memory requirements for parallel evaluation, and evaluation tasks
    are aggregated from all data sets into a single work queue and
    thread pool to keep your CPU cores pegged).

  * Allow arbitrary recommender components to be extracted with
    <<<LenskitRecommender>>>'s new <<<getComponent>>> method.  This
    allows client code to examine things like the item-item similarity
    matrix.

  * More test cases and lots more API documentation.

  []

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.1}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  Keep watching LensKit for further developments and lots of exciting
  new work this summer.

* Release 0.0.3

  This release contains many large changes, including significant
  architectural and API changes to make it easier to take LensKit
  forward.  See the {{{http://dev.grouplens.org/hg/lenskit}Mercurial
  changelog}} for complete change listings.  Highlights include:

  * Dropped our use of Guice for dependency injection and
    configuration.  Recommenders are now configured with the
    <<<LenskitRecommenderComponentFactory>>> class.  PicoContainer
    provides the underlying infrastructure, but this will be changing
    in the future.

  * Renamed and refactored classes in the recommender implementations
    to improve clarity and consistency.
    
  * Upgraded to Maven 3 (#issue(38)); Maven 2 is currently unsupported
    for building LensKit.  LensKit can, of course, be used by Maven 2
    projects without problem.

  * Lots of documentation improvements.

  * Introduce <<<ImmutableSparseVector>>> and build more robust
    type-checking for mutability guarantees on sparse vectors.

  * Drop thread safety guarantee on <<<UserRatingProfile>>>. Many
    profile implementations will likely be thread-safe, but we're not
    promising it any more.

  * Add a session concept to data access objects to make it easier to
    deal with database handle scoping and related issues.

  * Use Ant to manage evaluations.  This allows for more flexible
    evaluation processing setups.
    
  []

  The Mercurial changelog and the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.0.3}list
  of closed tickets}} provide more information on what has happened.

* Release 0.0.2 (March 28, 2011)

  This release contains a number of API changes to make the API
  cleaner and easier to move forward.

  * Renamed <<<BuildContext>>> to <<<RatingBuildContext>>> to allow
    for a future <<<BasketBuildContext>>>.

  * Added support for excluded items to recommendation API.

  * Added <<<AbstractRatingRecommender>>> helper class to make
    implementing rating recommenders easier.

  * Removed the <<<RecommenderService>>> class and several related
    classes to clean up the API.  Client code should directly request
    <<<RatingRecommender>>> or <<<RatingPredictor>>> instances, and
    modules should scope them and their dependencies appropriately to
    avoid duplicating recommender models.

  []

** API Compatibility Notes

    * Code dependent on <<<BuildContext>>> or <<<PackedBuildContext>>>
      must be updated to use <<<RatingBuildContext>>> and
      <<<PackedRatingBuildContext>>> instead.

    * Code implementing <<<RatingRecommender>>> must be updated to
      implement the new API.  We recommend using
      <<<AbstractRatingRecommender>>> to help with this.

    * All code must be updated to directly receive injected
      <<<RatingRecommender>>> and/or <<<RatingPredictor>>> instances
      (or providers thereof).

    []

* Release 0.0.1 (March 25, 2011)

  * Initial release

  []
