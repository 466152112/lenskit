                        ---------------------
                        LensKit Release Notes
                        ---------------------

#macro ( issue $id )##
{{{http://dev.grouplens.org/trac/lenskit/ticket/$id}#$id}}##
#end

Release ${project.version}

  The first beta release!  What this means for the future is that our
  core APIs (such as the recommenders and predictors) are pretty
  stable, and future changes to them will be documented and called out
  in the release notes.  In general, future release notes will be more
  detailed, as we're working on adding more features and stabilizing
  LensKit to a 1.0 release.

  This release contains many changes.  Highlights include:

  * Restructuring of recommendation and prediction interfaces to keep
    rating-based recommendation cleanly separated from more generic
    interfaces and facilitate reuse of predictor-based recommendation
    logic.

  * Removed <<<ScoredId>>> in favor of <<<ScoredLongList>>> for the
    recommendation API.

  * Added Slope-One recommenders.

  * Lots of bugfixes.

  * Increased parallelism in the evaluators (evaluators are now
    parallized per-configuration rather than per-dataset, decreasing
    memory requirements for parallel evaluation, and evaluation tasks
    are aggregated from all data sets into a single work queue and
    thread pool to keep your CPU cores pegged).

  * Allow arbitrary recommender components to be extracted with
    <<<LenskitRecommender>>>'s new <<<getComponent>>> method.  This
    allows client code to examine things like the item-item similarity
    matrix.

  * More test cases and lots more API documentation.

  []

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=${project.version}}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  Keep watching LensKit for further developments and lots of exciting
  new work this summer.

Release 0.0.3

  This release contains many large changes, including significant
  architectural and API changes to make it easier to take LensKit
  forward.  See the {{{http://dev.grouplens.org/hg/lenskit}Mercurial
  changelog}} for complete change listings.  Highlights include:

  * Dropped our use of Guice for dependency injection and
    configuration.  Recommenders are now configured with the
    <<<LenskitRecommenderComponentFactory>>> class.  PicoContainer
    provides the underlying infrastructure, but this will be changing
    in the future.

  * Renamed and refactored classes in the recommender implementations
    to improve clarity and consistency.
    
  * Upgraded to Maven 3 (#issue(38)); Maven 2 is currently unsupported
    for building LensKit.  LensKit can, of course, be used by Maven 2
    projects without problem.

  * Lots of documentation improvements.

  * Introduce <<<ImmutableSparseVector>>> and build more robust
    type-checking for mutability guarantees on sparse vectors.

  * Drop thread safety guarantee on <<<UserRatingProfile>>>. Many
    profile implementations will likely be thread-safe, but we're not
    promising it any more.

  * Add a session concept to data access objects to make it easier to
    deal with database handle scoping and related issues.

  * Use Ant to manage evaluations.  This allows for more flexible
    evaluation processing setups.
    
  []

  The Mercurial changelog and the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.0.3}list
  of closed tickets}} provide more information on what has happened.

Release 0.0.2 (March 28, 2011)

  This release contains a number of API changes to make the API
  cleaner and easier to move forward.

  * Renamed <<<BuildContext>>> to <<<RatingBuildContext>>> to allow
    for a future <<<BasketBuildContext>>>.

  * Added support for excluded items to recommendation API.

  * Added <<<AbstractRatingRecommender>>> helper class to make
    implementing rating recommenders easier.

  * Removed the <<<RecommenderService>>> class and several related
    classes to clean up the API.  Client code should directly request
    <<<RatingRecommender>>> or <<<RatingPredictor>>> instances, and
    modules should scope them and their dependencies appropriately to
    avoid duplicating recommender models.

  []

* API Compatibility Notes

    * Code dependent on <<<BuildContext>>> or <<<PackedBuildContext>>>
      must be updated to use <<<RatingBuildContext>>> and
      <<<PackedRatingBuildContext>>> instead.

    * Code implementing <<<RatingRecommender>>> must be updated to
      implement the new API.  We recommend using
      <<<AbstractRatingRecommender>>> to help with this.

    * All code must be updated to directly receive injected
      <<<RatingRecommender>>> and/or <<<RatingPredictor>>> instances
      (or providers thereof).

    []

Release 0.0.1 (March 25, 2011)

  * Initial release

  []
