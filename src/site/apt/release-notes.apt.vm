                        ---------------------
                        LensKit Release Notes
                        ---------------------

#macro ( issue $id )##
{{{http://dev.grouplens.org/trac/lenskit/ticket/$id}#$id}}##
#end

Release ${project.version}

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=${project.version}}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  * Added methods to <<<DataAccessObject>>>, with default
    implementations in the abstract implementation, to allow user
    history objects to be directly retrieved for given users.

  * Added snapshotting as an explicit concept to the data layer.
    <<<DAOFactory>>> now has a <<<snapshot()>>> method, which is
    supposed to return an immutable snapshot of the data for
    test/build purposes.  Iterative algorithms still use rating
    snapshots, as they're faster and provide indexing, but this allows
    us to be more flexible in what kinds of data access recommender
    component builders can perform.  Factory implementations now need
    to provide a snapshot method; this can be done by simply creating
    an event collection DAO from the events.  Users with large data
    sets may want to use more exotic methods like database replication
    or transactions.

    The <<<JDBCRatingDAO>>> factory makes snapshotting configurable.
    By default, it assumes the database is unchanging; it can be
    configured to take an in-memory snapshot and return an
    <<<EventCollectionDAO>>>.

  []

Release 0.3.1

  This release just contains a single change that should have been in
  0.3 (and is, unfortunately, backwards-incompatible):

  * Removed the generic parameter from <<<DAOFactory>>>.  We will be
    ensuring in a later release that the dependency injection
    mechanism allows subclasses of <<<DataAccessObject>>> to be
    visible as such.

  []
  

Release 0.3

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.3}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

* Event Infrastructure

  For flexibility going forward, LensKit 0.3 introduces a new
  <<<Event>>> infrastructure (#issue(48)) for representing user data.
  Users have sequences of events, represented by the <<<Event>>>
  interface.  Each event has an ID and an optional timestamp.  Events
  may be associated with items (subclasses of the <<<ItemEvent>>>
  interface).  Ratings are now <<rating events>>; they store a
  <<<Preference>>>, which represents the preference expressed by the
  user.  All of these interfaces and classes have been moved to the
  package <<<org.grouplens.lenskit.data.event>>> (with the preferences
  in <<<o.g.l.d.pref>>>).

  As a result of this, all ratings must now have globally-unique
  rating IDs (which are synthesized when they are not present in the
  data set).  Rating object equality is now defined solely by the
  event ID as well.  Also, the <<<Ratings.fromUserVector>>> method has
  been removed, as it no longer works.

  Rating snapshots now discard timestamps and return
  <<<IndexedPreference>>> objects, and the <<<IndexedRating>>> object
  has gone away.

  User profiles have also been changed; the <<<UserRatingProfile>>>
  class has been removed and replaced with <<<UserHistory>>> for a
  generalized representation of user histories.

** Restructured DAO interfaces

   The new event infrastructure has necessitated some overhauling of
   the DAO interface.  The new interface is hopefully simpler.  There
   are no longer multiple DAO interfaces in LensKit; everything is
   consolidated into the <<<DataAccessObject>>> interface (and the old
   <<<UserItemDataAccessObject>>> and <<<RatingDataAccessObject>>>
   interfaces have been removed).  The methods are renamed to be
   <<<getEvents>>> and friends.  Also, sorting is no longer supported
   for item and user event sequences.  

   Integrators may still wish to subclass <<<DataAccessObject>>> to
   make additional information, such as user or item metadata,
   available to recommenders.

   Implementations have also been renamed:

   * <<<SimpleFileDAO>>> has been renamed to
     <<<SimpleFileRatingDAO>>>, as it only supports rating data.

   * <<<RatingCollectionDAO>>> has been renamed to
     <<<EventCollectionDAO>>>.  It contains some optimizations to
     speed filtering.

   []

* Other Changes

  * The deprecated <<<SparseVector.wrap>>> methods now return
    <<<SparseVector>>> rather than <<<MutableSparseVector>>>, so that
    they can be overridden in <<<ImmutableSparseVector>>>.

  * Removed <<<NoSessionException>>>, as it has not been in use for
    some time.

  * <<<PackedRatingSnapshot>>> now randomizes the order of ratings in
    the snapshot to prevent ordering effects from impacting iterative
    methods.

  * Updated to GL Common 0.3.  This introduces the requirement that
    all elements in cursors be non-null.

  * Made <<<IdentityVectorNormalizer>>> serializable (#issue(106)).

  * Fixed bug where the recommender engine opened multiple DAOs for
    each session (#issue(108)).

  * Made POMs runnable with Maven 2, so Maven 2 can be used to compile
    LensKit (although it cannot generate the site) (#issue(72)).

  []


Release 0.2

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.2}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

* Core changes

  * Introduce user- and item-associated sparse vectors, including
    rating-specific variants of them, to allow types to express what
    kind of data is being operated on and to allow normalizers to be
    generalized.

    This results in changes to several interfaces, and to much code
    where item or user IDs are tracked and associated with vectors.
    This change likely introduces additional vector copying, but in
    the future we will be measuring ways to reduce this.

  * Abstract <<<UserRatingVectorNormalizer>>> into
    <<<VectorNormalizer>>> to apply to different vectors associated
    with entities such as users or items.

    With this change, several normalization-related classes have been
    renamed to better-reflect their nature.  Also, the normalization
    interface has been changed to only take reference and target
    vectors; normalization implementations that require user or item
    IDs should require the relevant type of sparse vector.

    Annotations and generic type arguments are used to indicate what
    the vector normalizer is normalizing.

  * Add the <<<freeze()>>> method to <<<MutableSparseVector>>>,
    returning an immutable vector from its data and rendering it
    invalid.

  []

** Compatibility notes

  Backwards-incompatible core changes:

  * Renamed <<<UserVarianceNormalizer>>> to
    <<<MeanVarianceNormalizer>>>.

  * Renamed <<<NormalizedRatingSnapshot>>> to
    <<<UserNormalizedRatingSnapshot>>>.

  * Renamed <<<AbstractUserRatingVectorNormlizer>>> to
    <<<AbstractVectorNormalizer>>>.

  * Renamed <<<IdentityUserRatingVectorNormlizer>>> to
    <<<IdentityVectorNormalizer>>>.

  * Many operations that took a user or item ID and a
    <<<SparseVector>>> now use a <<<UserVector>>>, <<<ItemVector>>>,
    or a rating-specific subtype.  This affects the
    <<<DynamicRatingPredictor>>> and
    <<<DynamicRatingItemRecommender>>> interfaces and all their
    subclasses.

  * <<<UserRatingVectorNormalizer>>> has been replaced with
    <<<VectorNormalizer<? super UserRatingVector>>>> and its interface
    has been changed.

  []

* Evaluator changes

  * Add boolean <<<isolate>>> option to the train-test Ant task to
    process datasets one at a time rather than parallelizing
    evaluations across this one.  Useful for reducing memory
    consumption evaluations on large data sets.

  []

Release 0.1

  The first beta release!  What this means for the future is that our
  core APIs (such as the recommenders and predictors) are pretty
  stable, and future changes to them will be documented and called out
  in the release notes.  In general, future release notes will be more
  detailed, as we're working on adding more features and stabilizing
  LensKit to a 1.0 release.

  This release contains many changes.  Highlights include:

  * Restructuring of recommendation and prediction interfaces to keep
    rating-based recommendation cleanly separated from more generic
    interfaces and facilitate reuse of predictor-based recommendation
    logic.

  * Removed <<<ScoredId>>> in favor of <<<ScoredLongList>>> for the
    recommendation API.

  * Added Slope-One recommenders.

  * Lots of bugfixes.

  * Increased parallelism in the evaluators (evaluators are now
    parallized per-configuration rather than per-dataset, decreasing
    memory requirements for parallel evaluation, and evaluation tasks
    are aggregated from all data sets into a single work queue and
    thread pool to keep your CPU cores pegged).

  * Allow arbitrary recommender components to be extracted with
    <<<LenskitRecommender>>>'s new <<<getComponent>>> method.  This
    allows client code to examine things like the item-item similarity
    matrix.

  * More test cases and lots more API documentation.

  []

  The {{{http://dev.grouplens.org/hg/lenskit}Mercurial changelog}} and
  the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.1}list
  of closed tickets}} provide more information on what has happened,
  including bugs that have been fixed.

  Keep watching LensKit for further developments and lots of exciting
  new work this summer.

Release 0.0.3

  This release contains many large changes, including significant
  architectural and API changes to make it easier to take LensKit
  forward.  See the {{{http://dev.grouplens.org/hg/lenskit}Mercurial
  changelog}} for complete change listings.  Highlights include:

  * Dropped our use of Guice for dependency injection and
    configuration.  Recommenders are now configured with the
    <<<LenskitRecommenderComponentFactory>>> class.  PicoContainer
    provides the underlying infrastructure, but this will be changing
    in the future.

  * Renamed and refactored classes in the recommender implementations
    to improve clarity and consistency.
    
  * Upgraded to Maven 3 (#issue(38)); Maven 2 is currently unsupported
    for building LensKit.  LensKit can, of course, be used by Maven 2
    projects without problem.

  * Lots of documentation improvements.

  * Introduce <<<ImmutableSparseVector>>> and build more robust
    type-checking for mutability guarantees on sparse vectors.

  * Drop thread safety guarantee on <<<UserRatingProfile>>>. Many
    profile implementations will likely be thread-safe, but we're not
    promising it any more.

  * Add a session concept to data access objects to make it easier to
    deal with database handle scoping and related issues.

  * Use Ant to manage evaluations.  This allows for more flexible
    evaluation processing setups.
    
  []

  The Mercurial changelog and the
  {{{http://dev.grouplens.org/trac/lenskit/query?status=closed&group=resolution&milestone=0.0.3}list
  of closed tickets}} provide more information on what has happened.

Release 0.0.2 (March 28, 2011)

  This release contains a number of API changes to make the API
  cleaner and easier to move forward.

  * Renamed <<<BuildContext>>> to <<<RatingBuildContext>>> to allow
    for a future <<<BasketBuildContext>>>.

  * Added support for excluded items to recommendation API.

  * Added <<<AbstractRatingRecommender>>> helper class to make
    implementing rating recommenders easier.

  * Removed the <<<RecommenderService>>> class and several related
    classes to clean up the API.  Client code should directly request
    <<<RatingRecommender>>> or <<<RatingPredictor>>> instances, and
    modules should scope them and their dependencies appropriately to
    avoid duplicating recommender models.

  []

* API Compatibility Notes

    * Code dependent on <<<BuildContext>>> or <<<PackedBuildContext>>>
      must be updated to use <<<RatingBuildContext>>> and
      <<<PackedRatingBuildContext>>> instead.

    * Code implementing <<<RatingRecommender>>> must be updated to
      implement the new API.  We recommend using
      <<<AbstractRatingRecommender>>> to help with this.

    * All code must be updated to directly receive injected
      <<<RatingRecommender>>> and/or <<<RatingPredictor>>> instances
      (or providers thereof).

    []

Release 0.0.1 (March 25, 2011)

  * Initial release

  []
