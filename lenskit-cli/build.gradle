import org.gradle.process.internal.ExecException
import java.util.zip.ZipFile

dependencies {
    compile project(':lenskit-all')
    compile group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.4.3'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    runtime group: 'org.fusesource.jansi', name: 'jansi', version: '1.8'
    runtime group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4jVersion
}

apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = 'org.grouplens.lenskit.cli.Main'
applicationName = 'lenskit'

task evalStartScripts(type: CreateStartScripts) {
    applicationName = 'lenskit-eval'
    mainClassName = 'org.grouplens.lenskit.eval.cli.EvalCLI'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    optsEnvironmentVar = 'LENSKIT_OPTS'
}
applicationDistribution.from(evalStartScripts) {
    into 'bin'
}

// Render the manpages
task renderManPages(group: 'build') {
    ext.manDir = 'src/site/markdown/man'
    ext.outputDir = "$buildDir/man"
    ext.filterScript = 'src/package/filter-manpage.py'
    inputs.source fileTree(manDir) {
        include '*.md'
    }
    inputs.file filterScript
    outputs.dir outputDir
    doLast {
        mkdir outputDir
        for (doc in inputs.sourceFiles.files) {
            def name = doc.name - '.md'
            try {
                exec {
                    executable 'pandocb'
                    args '-Mheader=LensKit'
                    args "-Mfooter=$version"
                    args '-Msection=1'
                    args '-F', file(filterScript)
                    args '-s', '-t', 'man'
                    args '-o', file("$outputDir/$name")
                    args doc
                }
            } catch (ExecException e) {
                logger.warn 'pandoc error, skipping man pages'
                throw new StopExecutionException("cannot run pandoc")
            }
        }
    }
}
applicationDistribution.from(renderManPages) {
    into 'man'
}

// aggregate license info and notices from dependencies
task notices(group: 'build') {
    ext.noticeFile = "$buildDir/NOTICE.txt"
    inputs.files configurations.runtime
    outputs.file noticeFile

    doLast {
        def cfg = configurations.runtime.resolvedConfiguration
        file(noticeFile).withPrintWriter { out ->
            out.println("This file contains the notices required by the libraries used by LensKit.")
            out.println()

            cfg.resolvedArtifacts*.file.each { File jar ->
                def zip = new ZipFile(jar)
                try {
                    def noticeEntry = zip.getEntry("META-INF/NOTICE.txt")
                    if (noticeEntry != null) {
                        def notice = zip.getInputStream(noticeEntry).text
                        out.println("${jar.name}:")
                        notice.eachLine { line ->
                            out.println("    ${line}")
                        }
                        out.println()
                    }
                } finally {
                    zip.close()
                }
            }
        }
    }
}
applicationDistribution.from(notices)
applicationDistribution.from('src/package/text')

// build application packages with standard tasks
build.dependsOn installApp
assemble.dependsOn distZip, distTar
